@{
    ViewData["Title"] = "Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
<style>
    :root {
        --primary-color: #133E87;
        --secondary-color: #608BC1;
        --background-color: #F3F3E0;
        --text-color: #333;
    }

    body {
        background-color: var(--background-color);
        font-family: 'Poppins', sans-serif;
        color: var(--text-color);
    }

    .container {
        max-width: 1350px;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .card {
        border: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .card-header {
        background: var(--secondary-color);
        color: white;
        font-weight: bold;
        border-radius: 10px 10px 0 0;
        text-align: center;
        padding: 10px;
    }

    /* Profile Image */
    #preview {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid var(--primary-color);
        transition: transform 0.3s ease-in-out;
    }

    #preview:hover {
        transform: scale(1.05);
    }

    .profile-info {
        text-align: center;
    }

    /* Form Inputs */
    .form-control {
        border-radius: 8px;
        padding: 10px;
        border: 1px solid var(--primary-color);
    }

    .form-control:focus {
        border-color: var(--secondary-color);
        box-shadow: 0 0 5px var(--secondary-color);
    }

    /* Buttons */
    .btn {
        border-radius: 8px;
        padding: 10px 15px;
        font-weight: bold;
    }

    .btn-primary {
        background: var(--primary-color);
        border: none;
    }

    .btn-primary:hover {
        background: var(--secondary-color);
    }

    .btn-dark:hover {
        background: #222;
    }

    .btn-danger {
        background: #C82333;
        border: none;
    }

    .btn-danger:hover {
        background: #A71D2A;
    }
</style>
}

<div class="row">
    <!-- Profile Picture Card -->
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-header">Profile Picture</div>
            <div class="card-body profile-info">
                <img id="preview" class="rounded-circle mb-2 object-fit-cover border" src="/profile_images"
                    onerror="this.src='/profile_images/placeholder.jpg'" alt="Profile Image">
                <div class="small font-italic text-muted">JPG or PNG no larger than 5 MB</div>
            </div>
        </div>
    </div>

    <!-- Account Details Card -->
    <div class="col-lg-8">
        <div class="card mb-4">
            <div class="card-header">Account Details</div>
            <div class="card-body">
                <form id="profileForm">
                    <input type="hidden" name="password" value="password" />
                    <input type="hidden" name="image" value="password" />

                        <input type="hidden" name="password" value="password"/>
                        <input type="hidden" name="image" value="image"/>
                        <div class="mb-3">
                            <label class="small mb-1" for="firstName">Full Name</label>
                            <div class="input-group">
                                <input type="text" id="firstName" name="firstName" class="form-control" placeholder="Firstname" pattern="[A-Za-z]+"
                                    title="Only alphabetic characters are allowed" required
                                    oninput="validateInput(this)"  aria-label="Firstname">
                                <input type="text" id="lastName" name="lastName" class="form-control" placeholder="Lastname" pattern="[A-Za-z]+"
                                    title="Only alphabetic characters are allowed" required
                                    oninput="validateInput(this)" aria-label="Lastname">
                            </div>
                            <span class="row">
                                <span class="col">
                                    <small id="msg-firstName" class="text-danger"></small>
                                </span>
                                <span class="col">
                                    <small id="msg-lastName" class="text-danger"></small>
                                </span>
                            </span>
                        </div>

                    <!-- Email -->
                    <div class="mb-3">
                        <label class="small mb-1" for="email">Email Address</label>
                        <input class="form-control" id="email" name="email" type="email"
                            placeholder="Enter your email address">
                        <small id="msg-email" class="text-danger"></small>
                    </div>

                    <!-- Profile Image Upload -->
                    <div class="mb-3">
                        <label class="small mb-1" for="imageFile">Profile Image</label>
                        <input type="file" id="imageFile" name="imageFile" class="form-control">
                    </div>

                    <!-- Buttons -->
                    <div class="row d-flex justify-content-between">
                        <div class="col-sm-4">
                            <button class="btn btn-primary mt-3" type="submit">Save Changes</button>
                        </div>
                        <div class="col-sm-4">
                            <a class="btn btn-dark mt-3" href="@Url.Action("ChangePass", "Auth")">Change Password</a>
                        </div>
                        
                    </div>
                </form>
            </div>
        </div>


    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const user = JSON.parse(sessionStorage.getItem("user"));
        const baseUrl = "http://localhost:5267/api/user";

        // Allow only alphabetic characters using regex
        $.validator.addMethod("lettersOnly", function (value, element) {
            return this.optional(element) || /^[A-Za-z]+$/.test(value);
        }, "Only alphabetic characters are allowed");


        //
        function loadUserData() {
            $.ajax({
                url: `${baseUrl}/${user.userId}`,
                method: "GET",
                success: function (response) {
                    let data = response.data;
                    $("#firstName").val(data.firstName);
                    $("#lastName").val(data.lastName);
                    $("#email").val(data.email);
                    $("input[name='image']").val(data.image);
                    $("#preview").attr("src", "/profile_images/" + data.image);
                },
                error: function (xhr, status, error) {
                    console.log(status, xhr);
                }
            });
        }

        function handleFormSubmit() {
            let formData = new FormData($("#profileForm")[0]);
            formData.append("userId", user.userId);
            $.ajax({
                url: `${baseUrl}`,
                method: "PUT",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    let updatedUser = response.data;
                    user.firstName = updatedUser.firstName;
                    user.lastName = updatedUser.lastName;
                    user.email = updatedUser.email;
                    user.image = updatedUser.image;
                    sessionStorage.setItem("user", JSON.stringify(user));
                    setProfileDiv();
                    //
                    Swal.fire({
                        title: "Profile Updated!",
                        icon: "success",
                        timer: 2000,
                        showConfirmButton: false
                    });
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: "Oops",
                        text: error,
                        icon: "error",
                        timer: 2000,
                        showConfirmButton: false
                    });
                }
            });
        }
        //
        $(document).ready(function () {
            loadUserData();

            // Form validation rules
            $('#profileForm').validate({
                rules: {
                    firstName: {
                        required: true,
                        minlength: 2,
                        lettersOnly: true
                    },
                    lastName: {
                        required: true,
                        minlength: 2,
                        lettersOnly: true
                    },
                    email: {
                        required: true,
                        email: true
                    }
                },
                messages: {
                    firstName: {
                        required: "Please enter your first name",
                        minlength: "First name must be at least 2 characters",
                        lettersOnly: "Only alphabetic characters are allowed"
                    },
                    lastName: {
                        required: "Please enter your last name",
                        minlength: "Last name must be at least 2 characters",
                        lettersOnly: "Only alphabetic characters are allowed"
                    },
                    email: {
                        required: "Please enter your email",
                        email: "Please enter a valid email address"
                    }
                },
                errorPlacement: function (error, element) {
                    const msgId = "#msg-" + $(element).attr("name");
                    $(msgId).removeClass('text-success').addClass('text-danger').text(error.text());
                },
                highlight: function (element) {
                    // error
                    $(element).removeClass('is-valid').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    // success
                    $(element).removeClass('is-invalid').addClass('is-valid');
                    const msgId = "#msg-" + $(element).attr("name");
                    $(msgId).removeClass('text-danger').addClass('text-success').text("Looks good!");
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    handleFormSubmit();
                }
            });

            // Real-time filtering for alphabets only
            function validateInput(input) {
                input.value = input.value.replace(/[^A-Za-z]/g, '');
            }

            // Image preview
            $("#imageFile").change(function () {
                let file = this.files[0];
                let reader = new FileReader(file);
                reader.onload = function (e) {
                    $("#preview").attr("src", e.target.result);
                }
                reader.readAsDataURL(file);
            });
        });
    </script>
}